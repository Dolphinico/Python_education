print('Создание и использование класса:\n')

class Dog(): 
# определяем класс - Dog, общепринято называть класс с верхнего регистра
# скобки пусты, тк класс создается с нуля
    """Простая модель собаки."""
    def __init__(self, name, age):
# метод __init__ - специальный метод автоматически выполняется при создании каждого нового экземпляра
# на базе класса Dog.
# параметр (self) обязателен
        """Инициализирует атрибуты name и age."""
        self.name = name 
        self.age = age
# Конструкция self.name = name берет значение, хранящееся в параметре name, 
# и сохраняет его в переменной name, которая затем связывается с создаваемым экземпляром, тоже самое с self.age
    def sit(self):
        """Собака садится по команде."""
        print(self.name.title() + " is now sitting.")
    def roll_over(self):
        """Собака делает перекат по команде."""
        print(self.name.title() + ' rolled over!')
#  В классе Dog также определяются два метода: sit() и roll_over()
#  Так как этим методам не нужна дополнительная информация (кличка или возраст),
#  они определяются с единственным параметром self.

# cоздадим экземпляр, представляющий конкретную собаку:

my_dog = Dog('maki', 4) 
# тут мы приказываем Python создать экземпляр собаки с кличкой 'willie' и возрастом 6.
print("My dog's name is " + my_dog.name.title() + ".") 
# мы обращаемся к значению атрибута name экземпляра my_dog.
print("My dog is " + str(my_dog.age) + " years old.") 
# мы обращаемся к значению атрибута age экземпляра my_dog + преобразуем 6(age) в строку (str)

# теперь вызываем методы, описанные в функциях sit и roll_over:

my_dog.sit()
my_dog.roll_over()

# создадим новый экземпляр:

your_dog = Dog('sandy', 6)
print("\nYour dog's name is " + your_dog.name.title() + ".")
print("Your dog is " + str(your_dog.age) + " years old.")
your_dog.sit()
your_dog.roll_over()
