print("Упражнение 9-1")

# Ресторан: создайте класс с именем Restaurant Метод __init__() класса Restaurant должен содержать два атрибута:
# restaurant_name и cuisine_type 
# Создайте метод describe_restaurant(), который выводит два атрибута, и метод open_restaurant(), 
# который выводит сообщение о том, что ресторан открыт.
# Создайте на основе своего класса экземпляр с именем restaurant.
# Выведите два атрибута по отдельности, затем вызовите оба метода.
# задача выполнена в файле restaurant.py

print("\nУпражнение 9-2")

# Три ресторана: начните с класса из упражнения 9-1 Создайте три разных экземпляра,
# вызовите для каждого экземпляра метод describe_restaurant()

print("\nУпражнение 9-3")

# Пользователи: создайте класс с именем User Создайте два атрибута first_name и last_name,
# а затем еще несколько атрибутов, которые обычно хранятся в профиле пользователя. 
# Напишите метод describe_user(), который выводит сводку с информацией о пользователе.
# Создайте еще один метод greet_user() для вывода персонального приветствия для пользователя.
# Создайте несколько экземпляров, представляющих разных пользователей.
# Вызовите оба метода для каждого пользователя.
# задача выполнена в файле new_user.py

print("\nУпражнение 9-4")

# Начните с программы из упражнения 9-1 (с 165) - Добавьте атрибут number_served со значением по умолчанию 0;
# он представляет количество обслуженных посетителей.
# Создайте экземпляр с именем restaurant. 
# Выведите значение number_served, потом измените и выведите снова.
# Добавьте метод с именем set_number_served(), позволяющий задать количество обслуженных посетителей. 
# Вызовите метод с новым числом, снова выведите значение.
# Добавьте метод с именем increment_number_served(), который увеличивает количество обслуженных посетителей на заданную величину. 
# Вызовите этот метод с любым числом, которое могло бы представлять количество обслуженных клиентов за один день.
# задача выполнена в файле new_restaurant.py

print("\nУпражнение 9-5")

# добавьте атрибут login_attempts в класс User из упражнения 9-3(с 165).
# Напишите метод increment_login_attempts(), увеличивающий значение login_attempts на 1. 
# Напишите другой метод с именем reset_login_attempts(), обнуляющий значение login_attempts.
# Создайте экземпляр класса User и вызовите increment_login_attempts() несколько раз. 
# Выведите значение login_attempts, чтобы убедиться в том, что значение было изменено правильно,
# а затем вызовите reset_login_attempts() Снова выведите login_attempts и убедитесь в том, что значение обнулилось.
# задача выполнена в файле new_user_2.py

print("\nУпражнение 9-6")

# Киоск с мороженым: киоск с мороженым — особая разновидность ресторана.
# Напишите класс IceCreamStand, наследующий от класса Restaurant из упражнения 9-1 (с 165) или упражнения 9-4 (с 169).
# Подойдет любая версия класса; просто выберите ту, которая вам больше нравится.
# Добавьте атрибут с именем flavors для хранения списка сортов мороженого.
# Напишите метод, который выводит этот список.
# Создайте экземпляр IceCreamStand и вызовите этот метод.
# задача выполнена в sub_restaurant.py

print("\nУпражнение 9-7")

# Администратор — особая разновидность пользователя.
# Напишите класс с именем Admin, наследующий от класса User из упражнения 9-3 или упражнения 9-5
# Добавьте атрибут privileges для хранения списка строк вида «разрешено добавлять сообщения», 
# «разрешено удалять пользователей», «разрешено банить пользователей» и т.д.
# Напишите метод show_privileges() для вывода набора привилегий администратора
# Создайте экземпляр Admin и вызовите свой метод.
# задача выполнена в sub_user.py

print("\nУпражнение 9-8")

# Привилегии: напишите класс Privileges.
# Класс должен содержать всего один атрибут privileges со списком строк из упражнения 9-7.
# Переместите метод show_privileges() в этот класс.
# Создайте экземпляр Privileges как атрибут класса Admin.
# Создайте новый экземпляр Admin и используйте свой метод для вывода списка привилегий.
# задача выполнена в sub_user_2.py

print("\nУпражнение 9-9")

# Обновление аккумулятора: используйте окончательную версию программы electric_car.py из этого раздела. 
# Добавьте в класс Battery метод с именем upgrade_battery().
# Этот метод должен проверять размер аккумулятора и устанавливать мощность равной 85,
# если она имеет другое значение. 
# Создайте экземпляр электромобиля с аккумулятором по умолчанию, вызовите get_range(), 
# а затем вызовите get_range() во второй раз послe вызова upgrade_battery().
# Убедитесь в том, что запас хода увеличился.